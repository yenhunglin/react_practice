{"version":3,"sources":["serviceWorker.js","conponents/robotList.js","conponents/Card.js","conponents/Cardlist.js","conponents/SearchBox.js","conponents/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","robots","id","name","username","email","Card","props","src","alt","title","Cardlist","robot","b","map","num","ind","arr","SearchBox","type","onChange","a","Scroll","style","backgroundColor","height","children","App","event","setState","searchfield","target","value","state","number","filteredRobots","this","filter","val","toLowerCase","includes","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6KAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBC,IAAMC,EAAS,CACpB,CACEC,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2B,4BC/CIC,EAVF,SAACC,GACZ,OACE,6BACE,yBAAKC,IAAG,+BAA0BD,EAAML,IAAMO,IAAI,OAClD,4BAAKF,EAAMG,OACX,4BAAKH,EAAMF,SCWFM,EAfE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAUZC,EAAID,EAAME,KATN,SAACC,EAAKC,EAAKC,GACnB,OACE,6BACE,kBAAC,EAAD,CAAMP,MAAOE,EAAMI,GAAKb,OACxB,kBAAC,EAAD,CAAMO,MAAM,WAOlB,OAAO,6BAAMG,ICJAK,EATG,SAACX,GACjB,OACE,6BACE,2BAAOY,KAAK,SAASC,SAAUb,EAAMc,MCK5BC,EARA,SAACf,GACd,OACE,yBAAKgB,MAAO,CAAEC,gBAAiB,MAAOC,OAAQ,UAC3ClB,EAAMmB,WCqCEC,E,kDAnCb,aAAe,IAAD,8BACZ,gBAQFP,SAAW,SAACQ,GACV,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAR1C,EAAKC,MAAQ,CACXC,OAAQ,EACRtB,MAAOX,EACP6B,YAAa,IALH,E,qDAcJ,IAAD,OAODK,EAAiBC,KAAKH,MAAMrB,MAAMyB,QAN7B,SAACC,EAAKtB,EAAKC,GACpB,OAAOqB,EAAInC,KACRoC,cACAC,SAAS,EAAKP,MAAMH,YAAYS,kBAKrC,OACE,6BACE,4BAAKH,KAAKH,MAAMC,QAChB,kBAAC,EAAD,CAAWb,EAAGe,KAAKhB,WACnB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUR,MAAOuB,IADnB,U,GA5BUM,IAAMC,WCCxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,6BAEE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SPqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.dd0936cb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export const robots = [\n  {\n    id: 1,\n    name: \"Leanne Graham\",\n    username: \"Bret\",\n    email: \"Sincere@april.biz\",\n  },\n  {\n    id: 2,\n    name: \"Ervin Howell\",\n    username: \"Antonette\",\n    email: \"Shanna@melissa.tv\",\n  },\n  {\n    id: 3,\n    name: \"Clementine Bauch\",\n    username: \"Samantha\",\n    email: \"Nathan@yesenia.net\",\n  },\n  {\n    id: 4,\n    name: \"Patricia Lebsack\",\n    username: \"Karianne\",\n    email: \"Julianne.OConner@kory.org\",\n  },\n  {\n    id: 5,\n    name: \"Chelsey Dietrich\",\n    username: \"Kamren\",\n    email: \"Lucio_Hettinger@annie.ca\",\n  },\n  {\n    id: 6,\n    name: \"Mrs. Dennis Schulist\",\n    username: \"Leopoldo_Corkery\",\n    email: \"Karley_Dach@jasper.info\",\n  },\n  {\n    id: 7,\n    name: \"Kurtis Weissnat\",\n    username: \"Elwyn.Skiles\",\n    email: \"Telly.Hoeger@billy.biz\",\n  },\n  {\n    id: 8,\n    name: \"Nicholas Runolfsdottir V\",\n    username: \"Maxime_Nienow\",\n    email: \"Sherwood@rosamond.me\",\n  },\n  {\n    id: 9,\n    name: \"Glenna Reichert\",\n    username: \"Delphine\",\n    email: \"Chaim_McDermott@dana.io\",\n  },\n  {\n    id: 10,\n    name: \"Clementina DuBuque\",\n    username: \"Moriah.Stanton\",\n    email: \"Rey.Padberg@karina.biz\",\n  },\n];\n","import React from \"react\";\n\nconst Card = (props) => {\n  return (\n    <div>\n      <img src={`https://robohash.org/${props.id}`} alt=\"yo\" />\n      <h1>{props.title}</h1>\n      <h2>{props.email}</h2>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst Cardlist = ({ robot }) => {\n  const a = (num, ind, arr) => {\n    return (\n      <div>\n        <Card title={robot[ind].name} />\n        <Card title=\"yo\" />\n      </div>\n    );\n  };\n\n  const b = robot.map(a);\n\n  return <div>{b}</div>;\n};\n\nexport default Cardlist;\n","import React from \"react\";\n\nconst SearchBox = (props) => {\n  return (\n    <div>\n      <input type=\"seatch\" onChange={props.a} />\n      {/* <h1 onClick={props.onClick}> inpute </h1> */}\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ backgroundColor: \"red\", height: \"500px\" }}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from \"react\";\nimport Cardlist from \"../conponents/Cardlist\";\nimport SearchBox from \"../conponents/SearchBox\";\nimport { robots } from \"../conponents/robotList\";\nimport Scroll from \"../conponents/Scroll\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      number: 1,\n      robot: robots,\n      searchfield: \"\",\n    };\n  }\n\n  onChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n    // console.log(this.state.searchfield);\n  };\n\n  render() {\n    const my = (val, ind, arr) => {\n      return val.name\n        .toLowerCase()\n        .includes(this.state.searchfield.toLowerCase());\n    };\n\n    const filteredRobots = this.state.robot.filter(my);\n\n    return (\n      <div>\n        <h1>{this.state.number}</h1>\n        <SearchBox a={this.onChange} />\n        <Scroll>\n          <Cardlist robot={filteredRobots} />;\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { robots } from \"./conponents/robotList\";\nimport App from \"./containers/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      {/* <Cardlist robot={robots} /> */}\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}